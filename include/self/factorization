using namespace std;
class Factorization
{
	public:
	vector <int> primes;
	bool *isprime;
	int n;
	void initPrimeList(int _n)
	{
		n=_n;
		isprime=new bool[n+5];
		for(int i=0;i<=n;i++)
		{
			isprime[i]=true;
		}
		isprime[0]=isprime[1]=false;
		for(int i=2;i<=n;i++)
		{
			if(isprime[i]) primes.push_back(i);
			for(auto &j:primes)
			{
				if(i*j>n) break;
				isprime[i*j]=false;
				if(i%j==0) break;
			}
		}
	}
	int getPrimeID(int p)
	{
		return lower_bound(primes.begin(),primes.end(),p)-primes.begin();
	}
	template <typename T>
	inline vector <T> getfactors(T x)
	{
		vector <T> vec;
		for(T i=1;i*i<=x;i++)
		{
			if(x%i==0)
			{
				vec.push_back(i);
				if(i!=x/i) vec.push_back(x/i);
			}
		}
		sort(vec.begin(),vec.end());
		return vec;
	}
	inline vector <pair<int,int> > factorizeFast(int x)
	{
		vector <pair<int,int> > vec;
		int nx=x;
		for(auto i:primes)
		{
			if(i*i>x) break;
			if(nx%i==0)
			{
				int s=0;
				while(nx%i==0)
				{
					s++;
					nx/=i;
				}
				vec.push_back(make_pair(i,s));
			}
		}
		if(nx!=1) vec.push_back(make_pair(nx,1));
		return vec;
	}
	inline vector <pair<int,int> > factorize(int x)
	{
		vector <pair<int,int> > vec;
		int nx=x;
		for(int i=2;i*i<=x;i++)
		{
			if(nx%i==0)
			{
				int s=0;
				while(nx%i==0)
				{
					s++;
					nx/=i;
				}
				vec.push_back(make_pair(i,s));
			}
		}
		if(nx!=1) vec.push_back(make_pair(nx,1));
		return vec;
	}
	inline vector <int> factorizeflat(int x)
	{
		vector <int> vec;
		int nx=x;
		for(int i=2;i*i<=x;i++)
		{
			if(nx%i==0)
			{
				int s=0;
				while(nx%i==0)
				{
					s++;
					nx/=i;
					vec.push_back(i);
				}
			}
		}
		if(nx!=1) vec.push_back(nx);
		return vec;
	}
	template <typename T>
	inline bool checkPrime(T x)
	{
		for(T i=2;i*i<=x;i++)
		{
			if(x%i==0) return false;
		}
		return true;
	}
};
