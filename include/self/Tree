#include <self/Graph>
#include <self/st-table>
namespace Tree
{
	struct GetParent
	{
		template <typename T>
		void dfs(int x, int p, T &arr, Graph &g)
		{
			arr[x] = p;
			for (auto &u : g.edges[x])
			{
				if (u == p) continue;
				dfs(u, x, arr, g);
			}
		}
		template <typename T>
		void getParArray(Graph &g, int rt, T &arr)
		{
			dfs(rt, -1, arr, g);
		}
	};

	struct GetDepth
	{
		template <typename T>
		static void dfs(int x, int p, int depth, T &arr, Graph &g)
		{
			arr[x]=depth;
			for (auto &u : g.edges[x])
			{
				if (u == p) continue;
				dfs(u, x, depth + 1, arr, g);
			}
		}
		template <typename T>
		static void getDepArray(Graph &g,T &arr,int rt = 0)
		{
			dfs(rt,-1,0,arr,g);
		}
	};

	struct LCA
	{
		int N;
		int LOGN;
		vector <int> depth;
		vector <vector <int> > par;
		void error(string s)
		{
			cout << s << endl;
			exit(0);
		}
		void init(Graph &g)
		{
			if(g.unDirected == false)
			{
				error("Error occured! Now LCA-algorithm only supports undirected graph!");
			}
			N = g.n;
			int tn = N;
			LOGN = 0;
			while (tn)
			{
				tn /= 2;
				LOGN++;
			}
			depth.resize(N);
			par.resize(LOGN);
			for (int i = 0; i < LOGN; i++)
			{
				par[i].resize(N);
			}
			GetDepth ta;
			GetParent tb;
			ta.getDepArray(g,depth, 0);
			tb.getParArray(g, 0, par[0]);
			for (int k = 0; k < LOGN - 1; k++)
			{
				for (int i=0;i<g.n;i++)
				{
					if(par[k][i] == -1)
					{
						par[k+1][i]=-1;
					}
					else
					{
						par[k + 1][i] = par[k][par[k][i]];
					}
				}
			}
		}
		template<typename Iterator>
		void init(Iterator begin,Iterator end)
		{
			Graph g;
			g.init(begin,end);
			init(g);
		}
		int getpar(int a,int k)
		{
			assert(k>=0);
			for(int i=LOGN-1;i>=0;i--)
			{
				if((1<<i) & k) a=par[i][a];
				if(a==-1) return a;
			}
			return a;
		}
		int lca(int a, int b)
		{
			if (depth[a] < depth[b]) swap(a, b);
			int t = depth[a] - depth[b];
			for (int i = 0; i < LOGN; i++)
			{
				if ((t & (1 << i)))	a=par[i][a];
			}
			if (a == b)	return a;
			for (int i = LOGN - 1; i >= 0; i--)
			{
				if (par[i][a] != par[i][b])
				{
					a = par[i][a];
					b = par[i][b];
				}
			}
			return par[0][a];
		}
		inline int getDist(int a, int b)
		{
			return depth[a]+depth[b]-depth[lca(a,b)]*2;
		}
	};
	struct LCAFast
	{
		vector <pii> eulerOrder;
		StTableFast <pii> stTable;
		vector <int> position;
		vector <int> depth;
		void dfs(int x,int par,const Graph &g)
		{
			position[x]=eulerOrder.size();
			eulerOrder.push_back(mp(depth[x],x));
			for(auto u:g.edges[x])
			{
				if(u==par) continue;
				dfs(u,x,g);
				eulerOrder.push_back(mp(depth[x],x));
			}
		}
		void init(Graph &g)
		{
			int n=g.n;
			position.resize(n);
			GetDepth gd;
			depth.resize(n);
			gd.getDepArray(g,depth,0);
			dfs(0,-1,g);
			stTable.init(all(eulerOrder));
		}
		template<typename Iterator>
		void init(Iterator begin,Iterator end)
		{
			Graph g;
			g.init(begin,end);
			init(g);
		}
		int lca(int x,int y)
		{
			int l=min(position[x],position[y]);
			int r=max(position[x],position[y])+1;
			return stTable.query(l,r).second;
		}
		inline int getDist(int x,int y)
		{
			int z=lca(x,y);
			return depth[x]+depth[y]-depth[z]*2;
		}
	};

	struct GetDiameter
	{
		static pair<int, int> dfs(Graph &g, int x, int par)
		{
			pair<int, int> res=make_pair(0, x);
			for (auto u : g.edges[x])
			{
				if (u==par)	continue;
				chmax(res, dfs(g, u, x) + make_pair(1, 0));
			}
			return res;
		}
		int getDiameter(Graph &g)
		{
			int a=dfs(g,0,-1).second;
			return dfs(g,a,-1).first;
		}
		int getDiameter(Graph &g,int &a,int &b)
		{
			a=dfs(g,0,-1).second;
			pii o=dfs(g,a,-1);
			b=o.second;
			return o.first;
		}
	};

	struct GetPSum
	{
		static void dfs(Graph &g, int dst[], int src[], int x = 0, int par = -1)
		{
			dst[x] = src[x];
			for (auto u : g.edges[x])
			{
				if (u == par) continue;
				dfs(g, dst, src, u, x);
				dst[x] += dst[u];
			}
		}
	};

	struct MarkLeaf
	{
		void mark(Graph &g,int arr[],int x=0)
		{
			for (int i = 0;i<g.n;i++)
			{
				if ((i!=x && (int)g.edges[i].size()<=1) || (i==x && g.edges[i].size()==0))
				{
					arr[i]=true;
				}
				else
				{
					arr[i]=false;
				}
			}
		}
	};

	struct JustVisit
	{
		int dfs(Graph &g, int arr[], int x = 0, int par = -1)
		{
			arr[x] = true;
			int cnt = 1;
			for (auto u : g.edges[x])
			{
				if (u == par)
					continue;
				cnt += dfs(g, arr, u, x);
			}
			return cnt;
		}
	};

	struct BulidSPTree
	{
		vector<int> dist;
		template <typename T>
		inline vector<pair<int, T>> build(GraphWithCost<T> &g, int rt)
		{
			vector<pair<int, T>> v(g.n);
			dist.resize(g.n);
			priority_queue<pii, vector<pii>, greater<pii>> que;
			for (int i = 0; i < g.n; i++)
			{
				dist[i] = inf;
			}
			dist[rt] = 0;
			que.push(mp(0, rt));
			while (que.size())
			{
				int x = que.top().second;
				int s = que.top().first;
				que.pop();
				if (s != dist[x])
					continue;
				for (int i = 0; i < g.edges[x].size(); i++)
				{
					int u = g.edges[x][i].first, ct = g.edges[x][i].second;
					if (dist[u] <= dist[x] + ct)
						continue;
					dist[u] = dist[x] + ct;
					v[u] = mp(x, ct);
					que.push(mp(dist[u], u));
				}
			}
			v[0] = mp(-1, 0);
			return v;
		}
	};
} // namespace Tree
