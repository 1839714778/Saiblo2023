#include <self/utility>
namespace MATRIX
{
	template <typename T>
	struct Matrix
	{
		vector <vector<T> > a;
		int row;
		int column;
		bool initialized=false;
		Matrix(){}
		Matrix(int n,int m){row=n;column=m;initialized=true;a.resize(n,vector <T> (m,T(0)));}
		Matrix(vector<T> _a) {row=_a.size(),column=1;a.resize(row,vector<T>(1));for(int i=0;i<row;i++) a[i][0]=_a[i];if(row==0) throw domain_error("wrong argument n=0");initialized=true;}
		Matrix(vector <vector <T> > _a){a=_a;row=a.size();if(row==0) throw domain_error("wrong argument n=0");column=a[0].size();initialized=true;}
		vector <T> & operator [](int x)
		{
			return a[x];
		}
		const vector <T> & operator [](int x)const
		{
			return a[x];
		}
		Matrix operator ~ ()const
		{
			Matrix b(column,row);
			for(int i=0;i<row;i++)
			{
				for(int j=0;j<column;j++)
				{
					b[j][i]=a[i][j];
				}
			}
			return b;
		}
		Matrix operator + (const Matrix &oth)const{
			if(row!=oth.row || column!=oth.column) throw logic_error("Operation A+B not satisfying shape(A)=shape(B)");
			Matrix res(*this);
			for(int i=0;i<row;i++)
			{
				for(int j=0;j<column;j++)
				{
					res[i][j]+=oth[i][j];
				}
			}
			return res;
		}
		Matrix operator - (const Matrix &oth)const{
			if(row!=oth.row || column!=oth.column) throw logic_error("Operation A-B not satisfying shape(A)=shape(B)");
			Matrix res(*this);
			for(int i=0;i<row;i++)
			{
				for(int j=0;j<column;j++)
				{
					res[i][j]-=oth[i][j];
				}
			}
			return res;
		}
		void init(int n,int m)
		{
			initialized=true;
			row=n;
			column=m;
			a.resize(n);
			for(int i=0;i<n;i++)
			{
				a[i].resize(m,T(0));
			}
			clear();
		}
		void clear()
		{
			if(!initialized)
			{
				throw runtime_error("clearing a matrix while not having initialized it");
			}
			for(int i=0;i<row;i++)
			{
				for(int j=0;j<column;j++)
				{
					a[i][j]=0;
				}
			}
		}
		void E()
		{
			clear();
			if(row!=column)
			{
				throw logic_error("Matrix E not satisfying Column(A)=Row(B)");
			}
			for(int i=0;i<row;i++)
			{
				a[i][i]=1;
			}
		}
		void print(string msg="")const
		{
			if(!initialized)
			{
				throw runtime_error("printing a matrix while not having initialized it");
			}
			cout<<"Matrix: "<<row<<'*'<<column;
			if(msg!="") cout<<'('<<msg<<')';
			cout<<endl;
			for(int i=0;i<row;i++)
			{
				for(int j=0;j<column;j++)
				{
					cout<<a[i][j]<<' ';
				}
				cout<<endl;
			}
			cout<<endl;
		}
		inline void getMul(const Matrix <T> &x,const Matrix <T> &y)
		{
			for(int i=0;i<row;i++)
			{
				for(int j=0;j<column;j++)
				{
					a[i][j]=0;
				}
			}
			for(int i=0;i<row;i++)
			{
				for(int k=0;k<x.column;k++)
				{
					for(int j=0;j<column;j++)
					{
						a[i][j]+=x.a[i][k]*y.a[k][j];
					}
				}
			}
		}
		inline Matrix <T> inv()
		{
			Matrix <T> mat=(*this);
			invert(mat);
			return mat;
		}
		inline Matrix <T> triangle()
		{
			Matrix <T> mat=(*this);
			triangular(mat);
			return mat;
		}
	};

	template <typename T>
	ostream & operator<<(ostream &cout, const vector<T> &vec)
	{
		cout << "{";
		for (int i = 0; i < (int)vec.size(); i++)
		{
			cout << vec[i];
			if (i != (int)vec.size() - 1)
				cout << ',';
		}
		cout << "}";
		return cout;
	}
	template <typename T>
	ostream & operator << (ostream &cout,const Matrix <T> &mat)
	{
		cout<<mat.a;
		return cout;
	}

	template <typename T>
	inline Matrix <T> operator * (const Matrix <T> &a,const Matrix <T> &b)
	{
		int n=a.row;
		int m=b.column;
		if(a.column!=b.row)
		{
			throw logic_error("Matrix multipication A*B not satisfying Column(A)=Row(B)");
		}
		int l=a.column;
		Matrix <T> res;
		res.init(n,m);
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				for(int k=0;k<l;k++)
				{
					res.a[i][j]+=(a[i][k]*b[k][j]);
				}
			}
		}
		return res;
	}

	template <typename T>
	inline void operator *=(Matrix <T> &a,Matrix <T> b)
	{
		a=a*b;
	}

	template <typename T>
	inline Matrix <T> fastpow(Matrix <T> basic,ll n)
	{
		if(basic.row!=basic.column) throw logic_error("calculating A^n while A is not a n*n format matrix");
		Matrix <T> res;
		res.init(basic.row,basic.row);
		res.E();
		while(n)
		{
			if(n&1) res=res*basic;
			basic=basic*basic;
			n>>=1;
		}
		return res;
	}

	template <typename T>
	inline void triangular(Matrix <T> &mat,int useM=-1)
	{
		T tmp=1;
		int n=mat.row;
		int m=mat.column;
		if(useM==-1) useM=m;
		vector <int> where(n,-1);
		for(int col=0,row=0;col<useM;col++)
		{
			int sel=row;
			for(int i=row+1;i<n;i++)
			{
				if(mabs(mat[i][col])>mabs(mat[sel][col])) sel=i;
			}
			if(mat[sel][col]==0) continue;
			if(sel!=row) tmp=T(0)-tmp;
			for(int j=col;j<m;j++)
			{
				swap(mat[row][j],mat[sel][j]);
			}
			T multiplier=T(1)/mat[row][col];
			tmp/=multiplier;
			// chmul(tmp,multiplier);
			for(int j=col;j<m;j++)
			{
				mat[row][j]*=multiplier;
			}
			for(int i=row+1;i<n;i++)
			{
				if(mat[i][col]==0) continue;
				for(int j=m-1;j>=col;j--)
				{
					mat[i][j]-=mat[i][col]*mat[row][j];
				}
			}
			where[row]=col;
			row++;
		}
		cout<<tmp<<endl;
		for(int row=n-1;row>=0;row--)
		{
			if(where[row]==-1) continue;
			int col=where[row];
			assert(mat[row][col]==1);
			for(int i=0;i<row;i++)
			{
				for(int j=m-1;j>=col;j--)
				{
					mat[i][j]-=mat[row][j]*mat[i][col];
				}
			}
		}
	}

	template <typename T>
	inline bool invert(Matrix <T> &mat)
	{
		if(mat.row!=mat.column) return false;
		int n=mat.row;
		Matrix <T> extendedMat(n,n+n);
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				extendedMat[i][j]=mat[i][j];
			}
			extendedMat[i][n+i]=1;
		}
		triangular(extendedMat,n);
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				if((i==j && extendedMat[i][j]!=1) || (i!=j && extendedMat[i][j]!=0)) return false;
			}
		}
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				mat[i][j]=extendedMat[i][j+n];
			}
		}
		return true;
	}
}
using MATRIX::Matrix;



int GaussElimination(Matrix<double> &A) //rank of columns
{
	// A.print();
	int n=A.row,m=A.column;
	vector<int> row(n,-1);
	int rk=0;
	for(int j=0,i=0;j<m && i<n;j++)
	{
		int sel=i;
		for(int k=i+1;k<n;k++)
		{
			if(mabs(A[k][j])>mabs(A[sel][j])) sel=k;
		}
		if(mabs(A[sel][j])<=eps) continue;
		swap(A[sel],A[i]);

		for(int l=m-1;l>=j;l--)
		{
			A[i][l]/=A[i][j];
		}
		for(int k=i+1;k<n;k++)
		{
			for(int l=m-1;l>=j;l--)
			{
				A[k][l]-=A[k][j]*A[i][l];
			}
		}
		row[i]=j;
		rk++;i++;
	}
	
	for(int i=n-1;i>=0;i--)
	{
		if(row[i]==-1) continue;
		assert(mabs(A[i][row[i]]-1)<=eps);
		for(int k=i-1;k>=0;k--)
		{
			for(int l=m-1;l>=row[i];l--)
			{
				A[k][l]-=A[k][row[i]]*A[i][l];
			}
		}
	}
	return rk;
}


int GaussElimination(Matrix<double> &A,vector<int> &row) //rank of columns
{
	int n=A.row,m=A.column;
	row=vector<int>(n,-1);
	int rk=0;
	for(int j=0,i=0;j<m && i<n;j++)
	{
		int sel=i;
		for(int k=i+1;k<n;k++)
		{
			if(mabs(A[k][j])>mabs(A[sel][j])) sel=k;
		}
		if(mabs(A[sel][j])<=eps) continue;
		swap(A[sel],A[i]);

		for(int l=m-1;l>=j;l--)
		{
			A[i][l]/=A[i][j];
		}
		for(int k=i+1;k<n;k++)
		{
			for(int l=m-1;l>=j;l--)
			{
				A[k][l]-=A[k][j]*A[i][l];
			}
		}
		row[i]=j;
		rk++;i++;
	}
	
	for(int i=n-1;i>=0;i--)
	{
		if(row[i]==-1) continue;
		assert(mabs(A[i][row[i]]-1)<=eps);
		for(int k=i-1;k>=0;k--)
		{
			for(int l=m-1;l>=row[i];l--)
			{
				A[k][l]-=A[k][row[i]]*A[i][l];
			}
		}
	}
	return rk;
}

int solveLinearEquation(Matrix<double> A,vector<double> B,Matrix <double> &C) // 0 - has solution, 1 - no solution
{
	int n=A.row,m=A.column+1;
	C.init(n,m);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m-1;j++)
		{
			C[i][j]=A[i][j];
		}
		C[i][m-1]=B[i];
	}

	GaussElimination(C);
	for(int i=0;i<n;i++)
	{
		int allzero=true;
		for(int j=0;j<m-1;j++)
		{
			allzero&=(mabs(C[i][j])<=eps);
		}
		if(allzero && mabs(C[i][m-1])>eps) return 1;
	}
	return 0;
}

int solveLinearEquation(Matrix<double> A,vector<double> B,vector<double> &x) // 0 - has solution, 1 - no solution
{
	int n=A.row,m=A.column+1;
	Matrix<double> C;
	C.init(n,m);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m-1;j++)
		{
			C[i][j]=A[i][j];
		}
		C[i][m-1]=B[i];
	}

	vector<int> row;
	GaussElimination(C,row);
	for(int i=0;i<n;i++)
	{
		int allzero=true;
		for(int j=0;j<m-1;j++)
		{
			allzero&=(mabs(C[i][j])<=eps);
		}
		if(allzero && mabs(C[i][m-1])>eps) return 1;
	}

	x=vector<double>(m-1,0);
	for(int i=0;i<n;i++)
	{
		if(row[i]!=-1) x[row[i]]=C[i][m-1];
	}
	return 0;
}