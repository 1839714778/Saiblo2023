#ifndef _SELF_NTT
#define _SELF_NTT 1
#include <self/ModInt>
template <int mod,int root,int LogN>
struct NTT
{
	using Int=ModInt <mod>;
	static const int MaxN=(1<<LogN);
	int w[MaxN+5];
	int fac[MaxN+5],ifac[MaxN+5],inum[MaxN+5];
	int fastpow(int basic,int x)
	{
		int res=1;
		while(x)
		{
			if(x&1) res=1LL*res*basic%mod;
			basic=1LL*basic*basic%mod;
			x>>=1;
		}
		return res;
	}
	int inv[MaxN+5];
	int buf[MaxN+5];
	int ww[MaxN+5];
	inline void ntt(vector<int> &v,int rev,int lg)
	{
		int n=(1<<lg);
		memset(buf,0,sizeof(int)*n);
		v.resize(n,0);
		for(int i=0;i<n;i++)
		{
			inv[i]=(inv[i>>1]>>1) | ((i&1)<<(lg-1));
		}
		for(int i=0;i<n;i++)
		{
			buf[i]=v[inv[i]];
		}
		int lvl=LogN;
		int *ba,*bb,*wa;
		int tmp;
		for(int b=1;b<n;b*=2)
		{
			lvl--;
			for(int i=0;i<b*2;i++) ww[i]=(rev?w[MaxN-(i<<lvl)]:w[i<<lvl]);
			// cout<<MaxN<<' '<<(1<<lvl)<<endl;
			for(int i=0;i<n;i+=b*2)
			{
				ba=buf+i;
				bb=buf+i+b;
				wa=ww;
				for(int j=0;j<b;j++)
				{
					tmp=1LL**wa**bb%mod;
					*bb=*ba-tmp;
					*ba+=tmp-mod;
					*ba+=((*ba)>>31 & mod);
					*bb+=((*bb)>>31 & mod);
					ba++;
					bb++;
					wa++;
				}
			}
			// for(int i=0;i<(1<<lg);i++)
			// {
			// 	cout<<buf[i]<<' ';
			// }
			// cout<<endl;
		}
		int t=fastpow(n,mod-2);
		if(rev)
		{
			for(int i=0;i<(1<<lg);i++)
			{
				buf[i]=1LL*buf[i]*t%mod;
			}
		}
		for(int i=0;i<(1<<lg);i++) v[i]=buf[i];
	}
	void add(const vector<int> &a,const vector<int> &b,vector<int> &c)
	{
		int n=a.size(),m=b.size();
		c.resize(max(n,m),0);
		for(int i=0;i<max(n,m);i++)
		{
			c[i]=(i>=n?0:a[i])+(i>=m?0:b[i])-mod;
			c[i]+=(c[i]>>31) & mod;
		}
	}
	void multiply(vector<int> a,vector<int> b,vector<int> &c)
	{
		int n=(int)a.size()+b.size()-1;
		if(min(a.size(),b.size())<=30)
		{
			c.clear();
			c.resize(max(0,n),0);
			for(int i=0;i<(int)a.size();i++)
			{
				for(int j=0;j<(int)b.size();j++)
				{
					c[i+j]=(1LL*a[i]*b[j]+c[i+j])%mod;
				}
			}
			while(c.size() && c.back()==0) c.pop_back();
			return;
		}
		int nn=1,lg=0;
		while(nn<n)
		{
			nn<<=1;
			lg++;
		}
		c.resize(nn);
		a.resize(nn,0);
		b.resize(nn,0);
		ntt(a,0,lg);
		ntt(b,0,lg);
		for(int i=0;i<nn;i++)
		{
			c[i]=1LL*a[i]*b[i]%mod;
		}
		ntt(c,1,lg);
		while(c.size() && c.back()==0) c.pop_back();
	}
	inline void togf(vector<int> &v)
	{
		int n=v.size();
		for(int i=0;i<n;i++) v[i]=1LL*v[i]*fac[i]%mod;
	}
	inline void toegf(vector<int> &v)
	{
		int n=v.size();
		for(int i=0;i<n;i++) v[i]=1LL*v[i]*ifac[i]%mod;
	}
	void sqr(vector<int> &a)
	{
		int n=(int)a.size()+a.size()-1;
		if(a.size()<=20)
		{
			vector<int> res(n,0);
			for(int i=0;i<(int)a.size();i++)
			{
				for(int j=0;j<(int)a.size();j++)
				{
					res[i+j]=(1LL*a[i]*a[j]+res[i+j])%mod;
				}
			}
			a=res;
			return;
		}
		int nn=1,lg=0;
		while(nn<n)
		{
			nn<<=1;
			lg++;
		}
		a.resize(nn,0);
		ntt(a,0,lg);
		for(int i=0;i<nn;i++)
		{
			a[i]=1LL*a[i]*a[i]%mod;
		}
		ntt(a,1,lg);
		while(a.size() && a.back()==0) a.pop_back();
	}
	inline vector<int> derivative(const vector<int> &v)
	{
		int n=v.size();
		if(n==0) return v;
		vector<int> rv(n-1);
		for(int i=0;i<n-1;i++)
		{
			rv[i]=1LL*v[i+1]*(i+1)%mod;
		}
		return rv;
	}
	inline void integral(vector<int> &v,int c=0)
	{
		int n=v.size()+1;
		v.emplace_back(0);
		for(int i=n-1;i>=1;i--)
		{
			v[i]=1LL*inum[i]*v[i-1]%mod;
		}
		v[0]=c;
	}
	inline vector<int> multiply(vector<int> v,int c)
	{
		for(auto &x:v)
		{
			x=1LL*x*c%mod;
		}
		return v;
	}
	inline vector<int> add(const vector<int> &a,const vector<int> &b)
	{
		vector<int> v=a;
		if(v.size()<b.size()) v.resize(b.size(),0);
		for(int i=0;i<(int)b.size();i++)
		{
			v[i]+=b[i]-mod;
			v[i]+=((v[i]>>31) & mod);
		}
		return v;
	}
	inline vector<int> sub(const vector<int> &a,const vector<int> &b)
	{
		vector<int> v=a;
		if(v.size()<b.size()) v.resize(b.size(),0);
		for(int i=0;i<(int)b.size();i++)
		{
			v[i]-=b[i];
			v[i]+=((v[i]>>31) & mod);
		}
		return v;
	}
	vector<int> inverse(vector<int> v,int n)
	{
		v.resize(n,0);
		if(n==1) {assert(v[0]);return vector<int>(1,fastpow(v[0],mod-2));};
		auto v0=inverse(v,(n+1)/2);
		vector<int> res=v0;res=multiply(res,2);
		sqr(v0);multiply(v,v0,v0);
		res=sub(res,v0);res.resize(n,0);
		return res;
	}
	vector<int> sqrt(vector<int> v,int n)
	{
		if(n==1) {assert(v[0]==1);return vector<int>(1,1);}
		int tn=(n+1)/2;
		auto v0=sqrt(v,tn);vector<int> res;multiply(v0,v0,res);
		res=add(res,v);res.resize(n,0);
		v0=inverse(multiply(v0,2),n);
		multiply(res,v0,res);
		res.resize(n,0);
		return res;
	}
	void div(const vector<int> &F,const vector<int> &G,vector<int> &Q,vector<int> &R)
	{
		int n=F.size(),m=G.size();
		if(n<m)
		{
			Q.clear();
			R=F;
			return;
		}
		vector<int> f=F,g=G;
		reverse(all(f));reverse(all(g));
		g.resize(n-m+1,0);
		g=inverse(g,g.size());
		multiply(f,g,Q);
		Q.resize(n-m+1,0);
		reverse(all(Q));
		multiply(G,Q,R);
		R.resize(m-1,0);
		for(int i=0;i<m-1;i++)
		{
			R[i]=(F[i]-R[i]+mod)%mod;
		}
	}
	vector<int> PolyMod(const vector<int> &a,const vector<int> &b)
	{
		vector<int> c,d;
		div(a,b,c,d);
		return d;
	}
	void internal_multipoint_eval(const vector<int> &v,const vector<int> &u,int x,int l,int r,vector<int> &res,vector<int> *f)
	{
		if(l>=res.size()) return;
		if(r-l==1)
		{
			res[l]=v[0];
			return;
		}
		vector<int> Q,R;
		div(v,f[x*2],Q,R);
		internal_multipoint_eval(R,u,x*2,l,l+r>>1,res,f);
		div(v,f[x*2+1],Q,R);
		internal_multipoint_eval(R,u,x*2+1,l+r>>1,r,res,f);
	}
	vector<int> multipoint_eval(vector<int> &v,const vector<int> &u)
	{
		if((int)u.size()<=32)
		{
			int n=u.size(),m=v.size();
			vector<int> res(n,0);
			for(int i=0;i<n;i++)
			{
				int ex=1;
				for(int j=0;j<m;j++)
				{
					// debug(ex,v[j]);
					res[i]=(1LL*ex*v[j]+res[i])%mod;
					ex=1LL*ex*u[i]%mod;
				}
			}
			return res;
		}
		vector<int> *f;
		int n=u.size(),nn=1;
		while(nn<n) nn<<=1;
		f=new vector<int> [nn+nn];
		for(int i=0;i<n;i++) f[nn+i]={mod-u[i],1};
		for(int i=n;i<nn;i++) f[nn+i]={1};
		for(int i=nn-1;i>=2;i--)
		{
			multiply(f[i*2],f[i*2+1],f[i]);
		}
		vector<int> res(n);
		internal_multipoint_eval(v,u,1,0,nn,res,f);
		delete [] f;
		return res;
	}
	vector<int> interpolation(const vector<int> &x,vector<int> y)
	{
		int n=x.size();
		vector<int> *f=new vector<int> [n];
		vector<int> *f2=new vector<int> [n];
		for(int i=0;i<n;i++)
		{
			f[i]={mod-x[i],1};
		}
		for(int b=1;b<n;b*=2)
		{
			for(int i=0;i<n;i+=b*2)
			{
				if(i+b<n) multiply(f[i],f[i+b],f[i]);
			}
		}
		vector<int> M=f[0],dM=derivative(M);
		vector<int> tmp=multipoint_eval(dM,x);
		for(int i=0;i<n;i++)
		{
			y[i]=1LL*y[i]*fastpow(tmp[i],mod-2)%mod;
		}
		for(int i=0;i<n;i++)
		{
			f[i]={mod-x[i],1};
			f2[i]={y[i]};
		}
		// cout<<"DONE"<<endl;
		for(int b=1;b<n;b<<=1)
		{
			for(int i=0;i<n;i+=b*2)
			{
				if(i+b<n)
				{
					vector<int> tmp;
					multiply(f2[i],f[i+b],tmp);
					multiply(f[i],f2[i+b],f2[i]);
					f2[i]=add(f2[i],tmp);
					multiply(f[i],f[i+b],f[i]);
				}
			}
		}
		vector<int> res=f2[0];
		delete [] f2;
		delete [] f;
		return res;
	}
	vector<int> log(const vector<int> &v)
	{
		int n=v.size();
		vector<int> dv=derivative(v),iv=v;iv=inverse(iv,iv.size());
		multiply(dv,iv,dv);
		integral(dv);
		dv.resize(n);
		return dv;
	}
	vector<int> exp(const vector<int> &v)
	{
		int n=v.size(),tn=(n-1)/2+1;
		vector<int> rv;
		if(n==1)
		{
			rv.push_back(1);return rv;
		}
		vector<int> f0(tn);for(int i=0;i<tn;i++) f0[i]=v[i];
		f0=exp(f0);f0.resize(n,0);
		vector<int> rhs(1,1);
		rhs=sub(rhs,log(f0));rhs=add(rhs,v);
		multiply(f0,rhs,f0);f0.resize(n);
		return f0;
	}
	inline void multiply(const vector<Int> &a,const vector<Int> &b,vector<Int> &c)
	{
		vector<int> ta(a.size()),tb(b.size());
		for(int i=0;i<(int)a.size();i++) ta[i]=a[i].x;
		for(int i=0;i<(int)b.size();i++) tb[i]=b[i].x;
		vector<int> tc;
		multiply(ta,tb,tc);
		c.clear();
		c.resize(tc.size());
		for(int i=0;i<(int)c.size();i++) c[i].x=tc[i];
	}
	vector<Int> multiply(const vector<Int> &a,const vector<Int> &b)
	{
		vector<int> ta(a.size()),tb(b.size());
		for(int i=0;i<(int)a.size();i++) ta[i]=a[i].x;
		for(int i=0;i<(int)b.size();i++) tb[i]=b[i].x;
		vector<int> tc;
		multiply(ta,tb,tc);
		vector<Int> c(tc.size());
		for(int i=0;i<(int)c.size();i++) c[i].x=tc[i];
		return c;
	}
	vector<int> pow(vector<int> bas,int n,int n2)
	{
		int c0=0;
		for(int i=0;i<(int)bas.size();i++)
		{
			if(bas[i]) break;
			c0=i+1;
		}
		for(int i=0;i<(int)bas.size()-c0;i++) bas[i]=bas[i+c0];
		for(int i=0;i<c0;i++) bas.pop_back();
		int c=bas[0],inum=fastpow(bas[0],mod-2);
		for(auto &x:bas) x=1LL*x*inum%mod;
		bas=log(bas);
		for(auto &x:bas) x=1LL*x*(n%mod)%mod;
		bas=exp(bas);
		c=fastpow(c,n2);
		for(auto &x:bas) x=1LL*x*c%mod;
		auto safepow=[](int x,ll n,ll lim)->int{
			if(x==1) return min(1LL,lim);
			if(x==0) return 0;
			ll res=1;
			for(int i=0;i<n;i++)
			{
				res*=x;
				if(res>lim) break;
			}
			res=min(res,lim);
		};
		c0=safepow(c0,n,bas.size());
		for(int i=c0;i<(int)bas.size();i++)
		{
			bas[i]=bas[i-c0];
		}
		for(int i=0;i<c0;i++) bas[i]=0;
		return bas;
	}
	NTT()
	{
		w[0]=1;
		int ur=fastpow(root,(mod-1)>>LogN);
		fac[0]=1;
		for(int i=1;i<=MaxN;i++)
		{
			w[i]=1LL*w[i-1]*ur%mod;
			fac[i]=1LL*fac[i-1]*i%mod;
		}
		ifac[MaxN]=fastpow(fac[MaxN],mod-2);
		for(int i=MaxN-1;i>=0;i--)
		{
			ifac[i]=1LL*ifac[i+1]*(i+1)%mod;
		}
		for(int i=1;i<=MaxN;i++)
		{
			inum[i]=1LL*ifac[i]*fac[i-1]%mod;
		}
	}
};
#endif